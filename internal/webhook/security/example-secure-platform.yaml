# Security-Compliant ObservabilityPlatform Example
# This example demonstrates a fully security-compliant configuration
# following the restricted Pod Security Standards

apiVersion: observability.io/v1beta1
kind: ObservabilityPlatform
metadata:
  name: secure-production
  namespace: monitoring
  annotations:
    # Required security annotations
    security.gunj-operator.io/pod-security-level: "restricted"
    security.gunj-operator.io/compliance-profile: "cis"
    # Additional security metadata
    security.gunj-operator.io/audited: "true"
    security.gunj-operator.io/audit-date: "2025-01-14"
  labels:
    environment: production
    security-level: restricted
spec:
  # Component configurations with full security context
  components:
    prometheus:
      enabled: true
      version: v2.48.0
      replicas: 3
      
      # Security context for Prometheus
      securityContext:
        podSecurityContext:
          runAsNonRoot: true
          runAsUser: 65534  # nobody user
          runAsGroup: 65534
          fsGroup: 65534
          fsGroupChangePolicy: "OnRootMismatch"
          seccompProfile:
            type: RuntimeDefault
          supplementalGroups: []
          sysctls: []
        
        containerSecurityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
          capabilities:
            drop:
            - ALL
            add: []  # No additional capabilities
          seccompProfile:
            type: RuntimeDefault
          seLinuxOptions: {}
          procMount: Default
      
      # Resources with proper limits
      resources:
        requests:
          memory: "2Gi"
          cpu: "500m"
        limits:
          memory: "4Gi"
          cpu: "1"
      
      # Storage configuration
      storage:
        size: 100Gi
        storageClassName: encrypted-ssd  # Use encrypted storage class
      
      # Environment variables using secrets only
      extraEnvVars:
      - name: REMOTE_WRITE_URL
        valueFrom:
          secretKeyRef:
            name: prometheus-secrets
            key: remote-write-url
      - name: BEARER_TOKEN
        valueFrom:
          secretKeyRef:
            name: prometheus-secrets
            key: bearer-token
    
    grafana:
      enabled: true
      version: "10.2.0"
      replicas: 2
      
      # Security context for Grafana
      securityContext:
        podSecurityContext:
          runAsNonRoot: true
          runAsUser: 472  # Grafana user
          runAsGroup: 472
          fsGroup: 472
          seccompProfile:
            type: RuntimeDefault
        
        containerSecurityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 472
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE  # Needed for binding to port 3000
          seccompProfile:
            type: RuntimeDefault
      
      # Admin password from secret
      adminPasswordSecret:
        name: grafana-admin
        key: password
      
      # Ingress with TLS
      ingress:
        enabled: true
        host: grafana.secure.example.com
        annotations:
          nginx.ingress.kubernetes.io/ssl-redirect: "true"
          nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
          nginx.ingress.kubernetes.io/hsts: "true"
          nginx.ingress.kubernetes.io/hsts-max-age: "31536000"
          nginx.ingress.kubernetes.io/hsts-include-subdomains: "true"
        tls:
          enabled: true
          secretName: grafana-tls
      
      resources:
        requests:
          memory: "512Mi"
          cpu: "200m"
        limits:
          memory: "1Gi"
          cpu: "500m"
    
    loki:
      enabled: true
      version: "2.9.0"
      replicas: 3
      
      # Security context for Loki
      securityContext:
        podSecurityContext:
          runAsNonRoot: true
          runAsUser: 10001
          runAsGroup: 10001
          fsGroup: 10001
          seccompProfile:
            type: RuntimeDefault
        
        containerSecurityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 10001
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
      
      storage:
        size: 200Gi
        storageClassName: encrypted-ssd
      
      # S3 configuration with IAM role
      s3:
        enabled: true
        bucketName: secure-loki-logs
        region: us-east-1
        useIAMRole: true  # Use IAM role instead of keys
      
      resources:
        requests:
          memory: "1Gi"
          cpu: "250m"
        limits:
          memory: "2Gi"
          cpu: "500m"
    
    tempo:
      enabled: true
      version: "2.3.0"
      replicas: 3
      
      # Security context for Tempo
      securityContext:
        podSecurityContext:
          runAsNonRoot: true
          runAsUser: 10001
          runAsGroup: 10001
          fsGroup: 10001
          seccompProfile:
            type: RuntimeDefault
        
        containerSecurityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 10001
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
      
      storage:
        size: 50Gi
        storageClassName: encrypted-ssd
      
      resources:
        requests:
          memory: "1Gi"
          cpu: "250m"
        limits:
          memory: "2Gi"
          cpu: "500m"
  
  # Security configuration
  security:
    # RBAC configuration
    rbac:
      create: true
      rules:
      - apiGroups: [""]
        resources: ["pods", "services"]
        verbs: ["get", "list", "watch"]
      - apiGroups: ["apps"]
        resources: ["deployments", "statefulsets"]
        verbs: ["get", "list", "watch"]
    
    # Service account
    serviceAccount: observability-platform-sa
    
    # TLS configuration
    tls:
      enabled: true
      autoTLS: false
      certSecret: platform-tls-cert
      minVersion: "1.2"
      cipherSuites:
      - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
      - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
      - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
      - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
    
    # Authentication
    authentication:
      type: "oidc"
      oidc:
        issuer: https://auth.example.com
        clientId: gunj-operator
        clientSecretRef:
          name: oidc-client-secret
          key: secret
        scopes:
        - openid
        - profile
        - email
        - groups
    
    # Pod Security Policy
    podSecurityPolicy: "restricted"
    
    # Audit logging
    auditLogging: true
    
    # Network policies
    networkPolicy:
      enabled: true
      ingress:
      # Allow from operator namespace
      - from:
        - namespaceSelector:
            matchLabels:
              name: gunj-system
        ports:
        - protocol: TCP
          port: 9090  # Prometheus
        - protocol: TCP
          port: 3000  # Grafana
        - protocol: TCP
          port: 3100  # Loki
        - protocol: TCP
          port: 3200  # Tempo
      
      # Allow from monitoring namespace
      - from:
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: prometheus
        ports:
        - protocol: TCP
          port: 9090
      
      # Allow from ingress controller
      - from:
        - namespaceSelector:
            matchLabels:
              name: ingress-nginx
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: ingress-nginx
        ports:
        - protocol: TCP
          port: 3000  # Grafana only
      
      egress:
      # Allow DNS
      - to:
        - namespaceSelector:
            matchLabels:
              name: kube-system
        - podSelector:
            matchLabels:
              k8s-app: kube-dns
        ports:
        - protocol: UDP
          port: 53
        - protocol: TCP
          port: 53
      
      # Allow to Kubernetes API
      - to:
        - namespaceSelector: {}
        - podSelector:
            matchLabels:
              component: kube-apiserver
        ports:
        - protocol: TCP
          port: 443
      
      # Allow to other platform components
      - to:
        - podSelector:
            matchLabels:
              app.kubernetes.io/managed-by: gunj-operator
        ports:
        - protocol: TCP
      
      # Allow to S3 for backup/storage (AWS)
      - to:
        - ipBlock:
            cidr: 52.216.0.0/15  # AWS S3 IP range (example)
        ports:
        - protocol: TCP
          port: 443
  
  # Global configuration
  global:
    logLevel: "info"
    externalLabels:
      cluster: "production-east"
      region: "us-east-1"
      environment: "production"
      security_level: "restricted"
  
  # High availability
  highAvailability:
    enabled: true
    minReplicas: 3
    antiAffinity: "required"
    podDisruptionBudget:
      minAvailable: 2
  
  # Backup configuration
  backup:
    enabled: true
    schedule: "0 2 * * *"
    retentionDays: 30
    destination:
      type: "s3"
      s3:
        bucketName: secure-backup-bucket
        region: us-east-1
        useIAMRole: true
        serverSideEncryption: "AES256"
        storageClass: "GLACIER"

---
# Example NetworkPolicy for additional security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: deny-all-ingress
  namespace: monitoring
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  # No ingress rules means all ingress is denied by default

---
# Example Secret for sensitive data
apiVersion: v1
kind: Secret
metadata:
  name: prometheus-secrets
  namespace: monitoring
type: Opaque
stringData:
  remote-write-url: "https://metrics.example.com/api/v1/write"
  bearer-token: "your-secure-token-here"

---
# Example ServiceAccount with minimal permissions
apiVersion: v1
kind: ServiceAccount
metadata:
  name: observability-platform-sa
  namespace: monitoring
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::123456789012:role/ObservabilityPlatformRole

---
# Example PodDisruptionBudget for HA
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: prometheus-pdb
  namespace: monitoring
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: prometheus
      app.kubernetes.io/managed-by: gunj-operator
