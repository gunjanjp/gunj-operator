# Security Scanning Pipeline
# Runs daily and on security-related changes
name: Security Scan

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main, develop ]
    paths:
      - 'go.mod'
      - 'go.sum'
      - 'ui/package.json'
      - 'ui/package-lock.json'
      - 'Dockerfile*'
      - '.github/workflows/security.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'go.mod'
      - 'go.sum'
      - 'ui/package.json'
      - 'ui/package-lock.json'
      - 'Dockerfile*'
  workflow_dispatch:

env:
  GO_VERSION: '1.21'
  NODE_VERSION: '20'

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # Go dependency scanning
  go-security:
    name: Go Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Run Nancy (dependency check)
      run: |
        go install github.com/sonatype-nexus-community/nancy@latest
        go list -json -deps ./... | nancy sleuth

    - name: Run Gosec (security check)
      run: |
        go install github.com/securego/gosec/v2/cmd/gosec@latest
        gosec -fmt sarif -out gosec-results.sarif ./...

    - name: Upload Gosec results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: gosec-results.sarif

    - name: Run go-licenses check
      run: |
        go install github.com/google/go-licenses@latest
        go-licenses check ./... --disallowed_types=forbidden,restricted

  # Node.js dependency scanning
  node-security:
    name: Node.js Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ui/package-lock.json

    - name: Install dependencies
      run: |
        cd ui
        npm ci

    - name: Run npm audit
      run: |
        cd ui
        npm audit --production

    - name: Run Snyk test
      uses: snyk/actions/node@master
      continue-on-error: true
      with:
        args: --severity-threshold=high --project-path=ui
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  # Container image scanning
  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [operator, api, ui]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build image for scanning
      uses: docker/build-push-action@v5
      with:
        context: .
        file: Dockerfile.${{ matrix.component == 'operator' && '' || matrix.component }}
        push: false
        load: true
        tags: gunj-${{ matrix.component }}:scan
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Trivy scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: gunj-${{ matrix.component }}:scan
        format: 'sarif'
        output: 'trivy-${{ matrix.component }}.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
        vuln-type: 'os,library'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-${{ matrix.component }}.sarif'
        category: 'trivy-${{ matrix.component }}'

    - name: Run Grype scanner
      uses: anchore/scan-action@v3
      with:
        image: gunj-${{ matrix.component }}:scan
        fail-build: false
        severity-cutoff: high

  # Secret scanning
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run Gitleaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # SAST with CodeQL
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        language: [ 'go', 'javascript' ]
    steps:
    - uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: security-and-quality

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{ matrix.language }}"

  # Kubernetes manifest security
  k8s-security:
    name: Kubernetes Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install tools
      run: |
        # Install kubesec
        wget https://github.com/controlplaneio/kubesec/releases/download/v2.13.0/kubesec_linux_amd64.tar.gz
        tar xzf kubesec_linux_amd64.tar.gz
        sudo mv kubesec /usr/local/bin/
        
        # Install Polaris
        wget https://github.com/FairwindsOps/polaris/releases/download/8.5.1/polaris_linux_amd64.tar.gz
        tar xzf polaris_linux_amd64.tar.gz
        sudo mv polaris /usr/local/bin/

    - name: Run Kubesec scan
      run: |
        find config/ -name "*.yaml" -o -name "*.yml" | while read -r file; do
          echo "Scanning $file with kubesec..."
          kubesec scan "$file" || true
        done

    - name: Run Polaris audit
      run: |
        polaris audit --audit-path config/ --format=pretty

  # License compliance
  license-compliance:
    name: License Compliance Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Check Go licenses
      run: |
        go install github.com/google/go-licenses@latest
        go-licenses report ./... --template=csv > go-licenses.csv
        
        # Check for problematic licenses
        if grep -E "(GPL|LGPL|AGPL)" go-licenses.csv; then
          echo "Found potentially incompatible licenses!"
          exit 1
        fi

    - name: Check Node licenses
      run: |
        cd ui
        npx license-checker --production --failOn="GPL;LGPL;AGPL" --csv > node-licenses.csv

    - name: Upload license reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: license-reports
        path: |
          go-licenses.csv
          ui/node-licenses.csv
        retention-days: 30

  # SBOM generation
  sbom-generation:
    name: Generate SBOM
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Generate SBOM with Syft
      uses: anchore/sbom-action@v0
      with:
        format: spdx-json
        output-file: sbom.spdx.json
        upload-artifact: true
        upload-release-assets: false

    - name: Generate CycloneDX SBOM
      run: |
        # Install tools
        go install github.com/CycloneDX/cyclonedx-gomod/cmd/cyclonedx-gomod@latest
        npm install -g @cyclonedx/cyclonedx-npm
        
        # Generate Go SBOM
        cyclonedx-gomod mod -json -output go-sbom.json
        
        # Generate Node SBOM
        cd ui
        cyclonedx-npm --output-format json --output-file ../node-sbom.json

    - name: Upload SBOMs
      uses: actions/upload-artifact@v4
      with:
        name: sbom-files
        path: |
          sbom.spdx.json
          go-sbom.json
          node-sbom.json
        retention-days: 30

  # Security report summary
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [go-security, node-security, container-security, secret-scan, codeql, k8s-security, license-compliance]
    if: always()
    steps:
    - name: Create security report
      run: |
        cat > security-report.md << EOF
        # Security Scan Report
        
        Date: $(date -u +%Y-%m-%d)
        Commit: ${{ github.sha }}
        
        ## Scan Results
        
        | Check | Status |
        |-------|--------|
        | Go Security | ${{ needs.go-security.result }} |
        | Node Security | ${{ needs.node-security.result }} |
        | Container Security | ${{ needs.container-security.result }} |
        | Secret Scan | ${{ needs.secret-scan.result }} |
        | CodeQL | ${{ needs.codeql.result }} |
        | K8s Security | ${{ needs.k8s-security.result }} |
        | License Compliance | ${{ needs.license-compliance.result }} |
        
        ## Next Steps
        
        1. Review any failed checks in the workflow run
        2. Address security vulnerabilities based on severity
        3. Update dependencies with known vulnerabilities
        4. Review and approve any new licenses
        
        EOF

    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: security-report.md
        retention-days: 30

    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('security-report.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: report
          });

    - name: Fail if security issues found
      if: |
        needs.go-security.result == 'failure' ||
        needs.node-security.result == 'failure' ||
        needs.container-security.result == 'failure' ||
        needs.secret-scan.result == 'failure' ||
        needs.license-compliance.result == 'failure'
      run: |
        echo "Security issues detected! Please review the security report."
        exit 1
