name: PR Automation

on:
  pull_request_target:
    types: [opened, edited, synchronize, reopened, ready_for_review]
  pull_request_review:
    types: [submitted]
  issue_comment:
    types: [created]

permissions:
  contents: read
  issues: write
  pull-requests: write
  checks: write

jobs:
  pr-metadata:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request_target'
    steps:
      - name: Add PR size label
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            const additions = pr.additions;
            const deletions = pr.deletions;
            const total = additions + deletions;
            
            let sizeLabel = '';
            if (total < 10) {
              sizeLabel = 'size/XS';
            } else if (total < 100) {
              sizeLabel = 'size/S';
            } else if (total < 500) {
              sizeLabel = 'size/M';
            } else if (total < 1000) {
              sizeLabel = 'size/L';
            } else {
              sizeLabel = 'size/XL';
            }
            
            // Remove existing size labels
            const labels = await github.rest.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number
            });
            
            for (const label of labels.data) {
              if (label.name.startsWith('size/')) {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.number,
                  name: label.name
                });
              }
            }
            
            // Add new size label
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              labels: [sizeLabel]
            });

      - name: Add component labels
        uses: actions/labeler@v4
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          configuration-path: .github/labeler.yml

  pr-validation:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request_target'
    steps:
      - name: Validate PR title
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            test
            build
            ci
            chore
            revert
          scopes: |
            operator
            api
            ui
            controllers
            crd
            webhooks
            helm
            docs
            deps
            security
          requireScope: false
          subjectPattern: ^(?![A-Z]).+$
          subjectPatternError: |
            The subject "{subject}" found in the pull request title "{title}"
            doesn't match the configured pattern. Please ensure that the subject
            doesn't start with an uppercase character.

      - name: Check PR description
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            const body = pr.body || '';
            
            // Check for minimum description length
            if (body.length < 50) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: '‚ùå PR description is too short. Please provide a detailed description of your changes.'
              });
              core.setFailed('PR description is too short');
            }
            
            // Check for issue references
            const issueRegex = /(closes|fixes|resolves|related to)\s+#\d+/gi;
            if (!issueRegex.test(body)) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: '‚ö†Ô∏è No issue reference found. Please link related issues using keywords like "Closes #123" or "Related to #456".'
              });
            }

  auto-assign:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request_target' && github.event.action == 'opened'
    steps:
      - name: Auto-assign reviewers
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            const files = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number
            });
            
            const reviewers = new Set();
            
            // Map file patterns to reviewers
            const reviewerMap = {
              'operator': ['maintainer1', 'maintainer2'],
              'api': ['backend-team'],
              'ui': ['frontend-team'],
              'docs': ['docs-team'],
              '.github': ['devops-team']
            };
            
            // Determine reviewers based on changed files
            for (const file of files.data) {
              for (const [pattern, team] of Object.entries(reviewerMap)) {
                if (file.filename.includes(pattern)) {
                  team.forEach(r => reviewers.add(r));
                }
              }
            }
            
            // Don't assign the PR author as reviewer
            reviewers.delete(pr.user.login);
            
            if (reviewers.size > 0) {
              await github.rest.pulls.requestReviewers({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number,
                reviewers: Array.from(reviewers).slice(0, 3) // Max 3 reviewers
              });
            }

  pr-commands:
    runs-on: ubuntu-latest
    if: github.event_name == 'issue_comment' && github.event.issue.pull_request
    steps:
      - name: Handle PR commands
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const comment = context.payload.comment;
            const command = comment.body.trim().toLowerCase();
            
            // Check if commenter has write access
            const { data: perm } = await github.rest.repos.getCollaboratorPermissionLevel({
              owner: context.repo.owner,
              repo: context.repo.repo,
              username: comment.user.login
            });
            
            if (!['admin', 'write'].includes(perm.permission)) {
              return;
            }
            
            // Handle commands
            if (command === '/lgtm') {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: ['lgtm']
              });
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: 'üëç LGTM label added by @' + comment.user.login
              });
            }
            
            if (command === '/approve') {
              await github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                event: 'APPROVE',
                body: 'Approved via /approve command'
              });
            }
            
            if (command === '/hold') {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: ['do-not-merge/hold']
              });
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: 'üõë Hold applied by @' + comment.user.login + '. This PR will not be merged until the hold is removed.'
              });
            }
            
            if (command === '/hold cancel' || command === '/unhold') {
              await github.rest.issues.removeLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                name: 'do-not-merge/hold'
              });
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: '‚úÖ Hold removed by @' + comment.user.login
              });
            }
            
            if (command.startsWith('/retest')) {
              // Trigger re-run of failed checks
              const { data: checks } = await github.rest.checks.listForRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: context.payload.issue.pull_request.head.sha
              });
              
              for (const check of checks.check_runs) {
                if (check.conclusion === 'failure') {
                  await github.rest.checks.rerequestRun({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    check_run_id: check.id
                  });
                }
              }
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: 'üîÑ Re-running failed checks as requested by @' + comment.user.login
              });
            }

  merge-readiness:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request_review' && github.event.review.state == 'approved'
    steps:
      - name: Check merge readiness
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number
            });
            
            // Check for required approvals (2)
            const reviews = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number
            });
            
            const approvals = reviews.data.filter(r => r.state === 'APPROVED').length;
            
            if (approvals >= 2) {
              // Check if all checks are passing
              const { data: checks } = await github.rest.checks.listForRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: pr.data.head.sha
              });
              
              const allChecksPassing = checks.check_runs.every(
                check => check.conclusion === 'success' || check.conclusion === 'skipped'
              );
              
              if (allChecksPassing) {
                // Add ready-to-merge label
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.payload.pull_request.number,
                  labels: ['ready-to-merge']
                });
                
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.payload.pull_request.number,
                  body: '‚úÖ This PR has received the required approvals and all checks are passing. It is ready to merge!'
                });
              }
            }
