name: Accessibility Testing

on:
  pull_request:
    paths:
      - 'ui/**'
      - '.github/workflows/accessibility.yml'
  push:
    branches: [main, develop]
    paths:
      - 'ui/**'

env:
  NODE_VERSION: '20'

jobs:
  static-analysis:
    name: Static Accessibility Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ui/package-lock.json
    
    - name: Install dependencies
      run: |
        cd ui
        npm ci
    
    - name: Run ESLint with jsx-a11y
      run: |
        cd ui
        npm run lint:a11y || true
        
        # Generate report
        npx eslint --ext .jsx,.js,.tsx,.ts src \
          --plugin jsx-a11y \
          --format json \
          --output-file ../eslint-a11y-report.json || true
    
    - name: Check for accessibility violations
      run: |
        cd ui
        ERRORS=$(jq '.[] | select(.errorCount > 0) | .errorCount' ../eslint-a11y-report.json | wc -l || echo "0")
        if [ "$ERRORS" -gt 0 ]; then
          echo "::error::Found $ERRORS files with accessibility errors"
          jq '.[] | select(.errorCount > 0) | {filePath, messages: .messages[] | select(.ruleId | startswith("jsx-a11y"))}' ../eslint-a11y-report.json
          exit 1
        fi

  component-testing:
    name: Component Accessibility Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ui/package-lock.json
    
    - name: Install dependencies
      run: |
        cd ui
        npm ci
    
    - name: Run jest-axe tests
      run: |
        cd ui
        npm test -- --testMatch="**/*.a11y.test.{js,jsx,ts,tsx}" \
          --coverage \
          --coverageReporters=json \
          --json \
          --outputFile=jest-a11y-results.json || true
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      with:
        name: jest-a11y-results
        path: ui/jest-a11y-results.json
    
    - name: Comment test results on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const results = JSON.parse(fs.readFileSync('ui/jest-a11y-results.json', 'utf8'));
          
          const passed = results.numPassedTests;
          const failed = results.numFailedTests;
          const total = passed + failed;
          
          const comment = `## 🎯 Accessibility Test Results
          
          ${failed === 0 ? '✅ All accessibility tests passed!' : '❌ Some accessibility tests failed'}
          
          - **Total Tests**: ${total}
          - **Passed**: ${passed}
          - **Failed**: ${failed}
          
          ${failed > 0 ? '### Failed Tests\n' + results.testResults
            .filter(t => t.status === 'failed')
            .map(t => `- ${t.name}`)
            .join('\n') : ''}
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  lighthouse-audit:
    name: Lighthouse Accessibility Audit
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ui/package-lock.json
    
    - name: Install dependencies
      run: |
        cd ui
        npm ci
    
    - name: Build application
      run: |
        cd ui
        npm run build
    
    - name: Serve application
      run: |
        cd ui
        npx serve -s build -p 3000 &
        sleep 5
    
    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: |
          http://localhost:3000
        uploadArtifacts: true
        temporaryPublicStorage: true
        configPath: './ui/.lighthouserc.json'
    
    - name: Format Lighthouse results
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const results = JSON.parse(fs.readFileSync('.lighthouseci/lhr-0.json', 'utf8'));
          const a11yScore = Math.round(results.categories.accessibility.score * 100);
          
          const comment = `## 🔍 Lighthouse Accessibility Audit
          
          **Score**: ${a11yScore}/100 ${a11yScore >= 90 ? '✅' : a11yScore >= 70 ? '⚠️' : '❌'}
          
          ### Details
          ${results.categories.accessibility.auditRefs
            .filter(audit => results.audits[audit.id].score !== 1)
            .map(audit => {
              const details = results.audits[audit.id];
              return `- **${details.title}**: ${details.description}`;
            })
            .join('\n')}
          
          [View full report](${process.env.LIGHTHOUSE_URL})
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  contrast-validation:
    name: Color Contrast Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Extract color variables
      run: |
        # Extract CSS color variables
        grep -h "color" ui/src/**/*.css | grep -E ":\s*#|rgb|hsl" > colors.txt || true
        
        # Check if we have colors to validate
        if [ -s colors.txt ]; then
          echo "Found color definitions to validate"
        else
          echo "No color definitions found"
          exit 0
        fi
    
    - name: Validate contrast ratios
      run: |
        # This is a simplified check - in real implementation, 
        # you'd use a proper color contrast checking tool
        echo "Checking color contrast ratios..."
        
        # Check for common low-contrast patterns
        if grep -E "#999|#aaa|#bbb|#ccc" colors.txt; then
          echo "::warning::Found potentially low-contrast colors"
        fi

  pa11y-scan:
    name: Pa11y Accessibility Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install Pa11y
      run: npm install -g pa11y
    
    - name: Build and serve application
      run: |
        cd ui
        npm ci
        npm run build
        npx serve -s build -p 3000 &
        sleep 10
    
    - name: Run Pa11y scan
      run: |
        pa11y http://localhost:3000 \
          --standard WCAG2AA \
          --reporter json > pa11y-results.json || true
    
    - name: Process Pa11y results
      run: |
        ERRORS=$(jq 'length' pa11y-results.json)
        
        if [ "$ERRORS" -gt 0 ]; then
          echo "::error::Found $ERRORS accessibility issues"
          jq '.[] | {type, code, message, selector}' pa11y-results.json
        else
          echo "✅ No accessibility issues found"
        fi
    
    - name: Upload Pa11y results
      uses: actions/upload-artifact@v3
      with:
        name: pa11y-results
        path: pa11y-results.json

  summary:
    name: Accessibility Summary
    runs-on: ubuntu-latest
    needs: [static-analysis, component-testing, lighthouse-audit, contrast-validation, pa11y-scan]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Generate summary report
      run: |
        echo "# Accessibility Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check job statuses
        if [ "${{ needs.static-analysis.result }}" == "success" ]; then
          echo "✅ Static Analysis: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Static Analysis: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.component-testing.result }}" == "success" ]; then
          echo "✅ Component Tests: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Component Tests: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.lighthouse-audit.result }}" == "success" ]; then
          echo "✅ Lighthouse Audit: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Lighthouse Audit: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "For detailed results, check individual job outputs." >> $GITHUB_STEP_SUMMARY
    
    - name: Set workflow status
      if: |
        needs.static-analysis.result == 'failure' ||
        needs.component-testing.result == 'failure' ||
        needs.lighthouse-audit.result == 'failure'
      run: exit 1
