name: Lint

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.21'
  NODE_VERSION: '20'
  GOLANGCI_LINT_VERSION: v1.55.2

jobs:
  go-lint:
    name: Go Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Install golangci-lint
      run: |
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | \
          sh -s -- -b $(go env GOPATH)/bin ${{ env.GOLANGCI_LINT_VERSION }}
          
    - name: Run golangci-lint
      run: golangci-lint run --config .golangci.yml ./...
      
    - name: Check Go formatting
      run: |
        if [ -n "$(gofmt -l .)" ]; then
          echo "Go code is not formatted. Run 'make fmt-go'"
          gofmt -l .
          exit 1
        fi

  ui-lint:
    name: UI Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ui/package-lock.json
        
    - name: Install dependencies
      working-directory: ./ui
      run: npm ci
      
    - name: Run ESLint
      working-directory: ./ui
      run: npm run lint
      
    - name: Check Prettier formatting
      working-directory: ./ui
      run: npm run format:check
      
    - name: Run TypeScript type check
      working-directory: ./ui
      run: npm run type-check

  yaml-lint:
    name: YAML Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install yamllint
      run: pip install yamllint
      
    - name: Run yamllint
      run: yamllint -c .yamllint.yml .

  docker-lint:
    name: Docker Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run hadolint
      uses: hadolint/hadolint-action@v3.1.0
      with:
        config: .hadolint.yaml
        recursive: true
        failure-threshold: error

  markdown-lint:
    name: Markdown Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run markdownlint
      uses: DavidAnson/markdownlint-cli2-action@v15
      with:
        config: '.markdownlint.json'
        globs: '**/*.md'

  shell-lint:
    name: Shell Script Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run ShellCheck
      uses: ludeeus/action-shellcheck@master
      with:
        severity: error
        check_together: 'yes'
        scandir: '.'
        
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner in repo mode
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run gosec security scanner
      uses: securego/gosec@master
      with:
        args: '-fmt sarif -out gosec-results.sarif ./...'
        
    - name: Upload gosec results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'gosec-results.sarif'

  lint-summary:
    name: Lint Summary
    runs-on: ubuntu-latest
    needs: [go-lint, ui-lint, yaml-lint, docker-lint, markdown-lint, shell-lint, security-scan]
    if: always()
    steps:
    - name: Check lint results
      run: |
        if [[ "${{ needs.go-lint.result }}" == "failure" || \
              "${{ needs.ui-lint.result }}" == "failure" || \
              "${{ needs.yaml-lint.result }}" == "failure" || \
              "${{ needs.docker-lint.result }}" == "failure" || \
              "${{ needs.markdown-lint.result }}" == "failure" || \
              "${{ needs.shell-lint.result }}" == "failure" || \
              "${{ needs.security-scan.result }}" == "failure" ]]; then
          echo "One or more lint checks failed"
          exit 1
        else
          echo "All lint checks passed successfully!"
        fi
