name: Cloud Native Maturity Assessment

on:
  schedule:
    # Run every Sunday at midnight UTC
    - cron: '0 0 * * 0'
  workflow_dispatch:
    inputs:
      generateReport:
        description: 'Generate HTML and Markdown reports'
        required: false
        default: 'true'
        type: boolean
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'Dockerfile'
      - 'config/**'
      - 'controllers/**'
      - 'api/**'
      - '.github/workflows/maturity-assessment.yml'

env:
  REPORT_BRANCH: maturity-reports
  METRICS_RETENTION_DAYS: 90

jobs:
  assess-maturity:
    name: Assess Cloud Native Maturity
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Make scripts executable
      run: |
        chmod +x hack/maturity-assessment.sh
        chmod +x scripts/generate-maturity-report.py
    
    - name: Run maturity assessment
      id: assessment
      run: |
        ./hack/maturity-assessment.sh
        
        # Extract scores from JSON
        TOTAL_SCORE=$(jq -r '.scores.total' maturity-assessment-report.json)
        PERCENTAGE=$(jq -r '.scores.percentage' maturity-assessment-report.json)
        MATURITY_LEVEL=$(jq -r '.maturityLevel' maturity-assessment-report.json)
        
        # Set outputs
        echo "total_score=$TOTAL_SCORE" >> $GITHUB_OUTPUT
        echo "percentage=$PERCENTAGE" >> $GITHUB_OUTPUT
        echo "maturity_level=$MATURITY_LEVEL" >> $GITHUB_OUTPUT
        
        # Set summary
        echo "## Cloud Native Maturity Assessment" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Score**: $TOTAL_SCORE/115 ($PERCENTAGE%)" >> $GITHUB_STEP_SUMMARY
        echo "**Level**: $MATURITY_LEVEL" >> $GITHUB_STEP_SUMMARY
    
    - name: Generate detailed reports
      if: github.event.inputs.generateReport == 'true' || github.event_name == 'schedule'
      run: |
        python scripts/generate-maturity-report.py
    
    - name: Upload assessment artifacts
      uses: actions/upload-artifact@v3
      with:
        name: maturity-assessment-${{ github.run_number }}
        path: |
          maturity-assessment-report.json
          maturity-report.html
          maturity-report.md
        retention-days: ${{ env.METRICS_RETENTION_DAYS }}
    
    - name: Create metrics badge
      if: github.event_name != 'pull_request'
      uses: schneegans/dynamic-badges-action@v1.6.0
      with:
        auth: ${{ secrets.GIST_SECRET }}
        gistID: ${{ secrets.MATURITY_GIST_ID }}
        filename: maturity-badge.json
        label: Maturity
        message: ${{ steps.assessment.outputs.maturity_level }}
        color: ${{ steps.assessment.outputs.percentage >= 70 && 'green' || steps.assessment.outputs.percentage >= 50 && 'yellow' || 'red' }}
    
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const score = '${{ steps.assessment.outputs.total_score }}';
          const percentage = '${{ steps.assessment.outputs.percentage }}';
          const level = '${{ steps.assessment.outputs.maturity_level }}';
          
          // Read the full report
          const fs = require('fs');
          const markdownReport = fs.readFileSync('maturity-report.md', 'utf8');
          
          const comment = `## 📊 Cloud Native Maturity Assessment
          
          This PR's impact on maturity score:
          - **Current Score**: ${score}/115 (${percentage}%)
          - **Maturity Level**: ${level}
          
          <details>
          <summary>View Full Report</summary>
          
          ${markdownReport}
          
          </details>
          
          ---
          *🤖 This comment was automatically generated by the Cloud Native Maturity Assessment workflow.*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
    
    - name: Store metrics in repository
      if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
      run: |
        # Create or checkout metrics branch
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Try to checkout existing branch or create new one
        git fetch origin $REPORT_BRANCH:$REPORT_BRANCH || true
        git checkout $REPORT_BRANCH || git checkout -b $REPORT_BRANCH
        
        # Create metrics directory if it doesn't exist
        mkdir -p metrics/maturity
        
        # Copy assessment results with timestamp
        TIMESTAMP=$(date +%Y%m%d_%H%M%S)
        cp maturity-assessment-report.json metrics/maturity/assessment_${TIMESTAMP}.json
        cp maturity-report.html metrics/maturity/report_${TIMESTAMP}.html
        cp maturity-report.md metrics/maturity/report_${TIMESTAMP}.md
        
        # Update latest symlinks
        ln -sf assessment_${TIMESTAMP}.json metrics/maturity/latest.json
        ln -sf report_${TIMESTAMP}.html metrics/maturity/latest.html
        ln -sf report_${TIMESTAMP}.md metrics/maturity/latest.md
        
        # Generate trend data
        echo "Generating trend data..."
        python3 <<EOF
import json
import glob
import os

# Load all assessment files
assessments = []
for file in sorted(glob.glob('metrics/maturity/assessment_*.json')):
    with open(file, 'r') as f:
        data = json.load(f)
        assessments.append({
            'timestamp': data['timestamp'],
            'score': data['scores']['total'],
            'percentage': data['scores']['percentage'],
            'level': data['maturityLevel']
        })

# Save trend data
with open('metrics/maturity/trend.json', 'w') as f:
    json.dump(assessments, f, indent=2)

print(f"Processed {len(assessments)} assessments")
EOF
        
        # Commit and push
        git add metrics/
        git commit -m "Update maturity metrics - $(date +%Y-%m-%d)" || echo "No changes to commit"
        git push origin $REPORT_BRANCH || git push --set-upstream origin $REPORT_BRANCH
    
    - name: Check maturity thresholds
      if: github.event_name == 'pull_request'
      run: |
        # Define minimum thresholds
        MIN_PERCENTAGE=30  # Minimum 30% for PRs to main
        
        PERCENTAGE=${{ steps.assessment.outputs.percentage }}
        
        if [ $PERCENTAGE -lt $MIN_PERCENTAGE ]; then
          echo "::error::Cloud Native Maturity score ($PERCENTAGE%) is below minimum threshold ($MIN_PERCENTAGE%)"
          exit 1
        fi

  compare-with-baseline:
    name: Compare with Baseline
    runs-on: ubuntu-latest
    needs: assess-maturity
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout base branch
      uses: actions/checkout@v4
      with:
        ref: ${{ github.base_ref }}
    
    - name: Run baseline assessment
      id: baseline
      run: |
        chmod +x hack/maturity-assessment.sh
        ./hack/maturity-assessment.sh || echo "Baseline assessment failed"
        
        if [ -f maturity-assessment-report.json ]; then
          BASELINE_SCORE=$(jq -r '.scores.total' maturity-assessment-report.json)
          echo "baseline_score=$BASELINE_SCORE" >> $GITHUB_OUTPUT
        else
          echo "baseline_score=0" >> $GITHUB_OUTPUT
        fi
    
    - name: Calculate delta
      run: |
        CURRENT=${{ needs.assess-maturity.outputs.total_score }}
        BASELINE=${{ steps.baseline.outputs.baseline_score }}
        DELTA=$((CURRENT - BASELINE))
        
        if [ $DELTA -gt 0 ]; then
          echo "✅ Maturity score improved by $DELTA points!" >> $GITHUB_STEP_SUMMARY
        elif [ $DELTA -lt 0 ]; then
          echo "⚠️ Maturity score decreased by ${DELTA#-} points" >> $GITHUB_STEP_SUMMARY
        else
          echo "➡️ Maturity score unchanged" >> $GITHUB_STEP_SUMMARY
        fi

  publish-report:
    name: Publish Report to Pages
    runs-on: ubuntu-latest
    needs: assess-maturity
    if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: maturity-assessment-${{ github.run_number }}
    
    - name: Setup Pages
      uses: actions/configure-pages@v3
    
    - name: Upload to Pages
      uses: actions/upload-pages-artifact@v2
      with:
        path: .
    
    - name: Deploy to Pages
      id: deployment
      uses: actions/deploy-pages@v2
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
