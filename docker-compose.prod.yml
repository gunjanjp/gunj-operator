version: '3.8'

services:
  # Production Operator
  operator:
    image: gunjanjp/gunj-operator:${VERSION:-latest}
    container_name: gunj-operator
    restart: always
    volumes:
      - ${KUBECONFIG:-/etc/kubernetes/admin.conf}:/home/nonroot/.kube/config:ro
    environment:
      - KUBECONFIG=/home/nonroot/.kube/config
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - METRICS_ADDR=:8080
      - HEALTH_ADDR=:8081
      - WEBHOOK_PORT=9443
      - ENABLE_LEADER_ELECTION=true
      - NAMESPACE=${WATCH_NAMESPACE:-}
    ports:
      - "8080:8080"  # Metrics
      - "8081:8081"  # Health
    networks:
      - gunj-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8081/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Production API Server
  api-server:
    image: gunjanjp/gunj-operator-api:${VERSION:-latest}
    container_name: gunj-api-server
    restart: always
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - PORT=8090
      - METRICS_PORT=8091
      - CORS_ENABLED=${CORS_ENABLED:-true}
      - CORS_ORIGINS=${CORS_ORIGINS:-}
      - JWT_SECRET=${JWT_SECRET:?JWT_SECRET required}
      - OIDC_ISSUER=${OIDC_ISSUER:-}
      - OIDC_CLIENT_ID=${OIDC_CLIENT_ID:-}
      - REDIS_URL=redis://redis:6379/0
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - NATS_URL=nats://nats:4222
      - NATS_USER=${NATS_USER:-}
      - NATS_PASSWORD=${NATS_PASSWORD:-}
      - DATABASE_URL=${DATABASE_URL:-postgres://gunj:password@postgres:5432/gunj_operator?sslmode=require}
      - RATE_LIMIT_ENABLED=true
      - RATE_LIMIT_RPS=${RATE_LIMIT_RPS:-100}
    ports:
      - "8090:8090"  # REST API
      - "8091:8091"  # Metrics
    depends_on:
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - gunj-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 1G
        reservations:
          cpus: '1'
          memory: 512M
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8090/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Production UI
  ui:
    image: gunjanjp/gunj-operator-ui:${VERSION:-latest}
    container_name: gunj-ui
    restart: always
    environment:
      - REACT_APP_API_URL=${API_URL:-/api}
      - REACT_APP_WS_URL=${WS_URL:-/ws}
      - REACT_APP_GRAPHQL_URL=${GRAPHQL_URL:-/graphql}
      - REACT_APP_AUTH_ENABLED=${AUTH_ENABLED:-true}
      - REACT_APP_OIDC_AUTHORITY=${OIDC_AUTHORITY:-}
      - REACT_APP_OIDC_CLIENT_ID=${OIDC_CLIENT_ID:-gunj-operator-ui}
    ports:
      - "3000:3000"
    depends_on:
      api-server:
        condition: service_healthy
    networks:
      - gunj-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: gunj-redis
    restart: always
    volumes:
      - redis-data:/data
      - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "6379:6379"
    networks:
      - gunj-network
    command: redis-server /usr/local/etc/redis/redis.conf
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # NATS for event streaming
  nats:
    image: nats:2.10-alpine
    container_name: gunj-nats
    restart: always
    volumes:
      - nats-data:/data
      - ./config/nats/nats.conf:/etc/nats/nats.conf:ro
    ports:
      - "4222:4222"  # Client connections
      - "8222:8222"  # HTTP monitoring
    networks:
      - gunj-network
    command: ["-c", "/etc/nats/nats.conf"]
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "4222"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for persistent storage
  postgres:
    image: postgres:16-alpine
    container_name: gunj-postgres
    restart: always
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./config/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-gunj_operator}
      - POSTGRES_USER=${POSTGRES_USER:-gunj}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:?POSTGRES_PASSWORD required}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256 --auth-local=scram-sha-256
    ports:
      - "5432:5432"
    networks:
      - gunj-network
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-gunj}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:1.25-alpine
    container_name: gunj-nginx
    restart: always
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - ui
      - api-server
    networks:
      - gunj-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 256M
        reservations:
          cpus: '0.5'
          memory: 128M
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  gunj-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis-data:
    driver: local
  nats-data:
    driver: local
  postgres-data:
    driver: local
