# Basic Horizontal Pod Autoscaling Example
apiVersion: observability.io/v1beta1
kind: ObservabilityPlatform
metadata:
  name: platform-with-hpa
  namespace: monitoring
spec:
  # Global autoscaling configuration
  autoscaling:
    enabled: true
    hpa:
      enabled: true
    # Simple configuration - just HPA
    vpa:
      enabled: false
    predictive:
      enabled: false
    costAware:
      enabled: false
  
  # Component-specific configurations
  components:
    prometheus:
      enabled: true
      version: v2.48.0
      
      # Basic HPA configuration
      autoscaling:
        # Replica bounds
        minReplicas: 2
        maxReplicas: 10
        
        # Target metrics
        targetCPUUtilizationPercentage: 70
        targetMemoryUtilizationPercentage: 80
        
        # Scale down stabilization (prevent flapping)
        scaleDownStabilizationWindowSeconds: 300  # 5 minutes
      
      # Resources must be set for HPA to work
      resources:
        requests:
          cpu: "500m"
          memory: "2Gi"
        limits:
          cpu: "2"
          memory: "8Gi"
    
    grafana:
      enabled: true
      version: "10.2.0"
      
      # Different scaling parameters for Grafana
      autoscaling:
        minReplicas: 1
        maxReplicas: 5
        targetCPUUtilizationPercentage: 80
        # No memory target - CPU only
      
      resources:
        requests:
          cpu: "100m"
          memory: "256Mi"
        limits:
          cpu: "500m"
          memory: "1Gi"
    
    loki:
      enabled: true
      version: "2.9.0"
      
      # More aggressive scaling for log ingestion
      autoscaling:
        minReplicas: 3
        maxReplicas: 20
        targetCPUUtilizationPercentage: 60
        targetMemoryUtilizationPercentage: 70
        
        # Faster scale up, slower scale down
        behavior:
          scaleUp:
            stabilizationWindowSeconds: 60
            policies:
            - type: Percent
              value: 100  # Double the pods
              periodSeconds: 60
            - type: Pods
              value: 5    # Or add 5 pods max
              periodSeconds: 60
          scaleDown:
            stabilizationWindowSeconds: 600  # 10 minutes
            policies:
            - type: Percent
              value: 10   # Remove 10% of pods
              periodSeconds: 60
      
      resources:
        requests:
          cpu: "250m"
          memory: "512Mi"
        limits:
          cpu: "1"
          memory: "2Gi"

---
# The operator will create these HPA resources automatically:
# Example of what gets created (DO NOT APPLY THIS DIRECTLY)
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: platform-with-hpa-prometheus-hpa
  namespace: monitoring
  labels:
    app.kubernetes.io/managed-by: gunj-operator
    observability.io/platform: platform-with-hpa
    observability.io/component: prometheus
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: prometheus-deployment
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
