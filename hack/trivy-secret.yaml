# Trivy secret scanning configuration
# Custom rules for detecting secrets specific to our project

custom-rules:
  - id: gunj-operator-api-key
    category: API Key
    title: Gunj Operator API Key
    regex: 'gunj[_-]?api[_-]?key[\s]*[:=][\s]*["\']?([a-zA-Z0-9]{32,})["\']?'
    keywords:
      - gunj_api_key
      - gunj-api-key
      - gunjApiKey

  - id: kubernetes-secret
    category: Kubernetes
    title: Kubernetes Secret
    regex: 'kind:\s*Secret[\s\S]*?data:([\s\S]*?)(?=---|\Z)'
    keywords:
      - "kind: Secret"

  - id: jwt-secret
    category: JWT
    title: JWT Secret Key
    regex: 'jwt[_-]?secret[\s]*[:=][\s]*["\']?([a-zA-Z0-9+/=]{32,})["\']?'
    keywords:
      - jwt_secret
      - jwt-secret
      - jwtSecret

  - id: database-url
    category: Database
    title: Database Connection String
    regex: '(postgres|postgresql|mysql|mongodb)://[^:]+:[^@]+@[^/]+/[^\s]+'
    keywords:
      - DATABASE_URL
      - DB_CONNECTION

  - id: private-key
    category: Cryptography
    title: Private Key
    regex: '-----BEGIN (RSA |EC |DSA |OPENSSH )?PRIVATE KEY-----'
    keywords:
      - "BEGIN PRIVATE KEY"
      - "BEGIN RSA PRIVATE KEY"

  - id: oauth-secret
    category: OAuth
    title: OAuth Client Secret
    regex: '(client[_-]?secret|oauth[_-]?secret)[\s]*[:=][\s]*["\']?([a-zA-Z0-9_-]{32,})["\']?'
    keywords:
      - client_secret
      - oauth_secret

# Additional configuration
allow-rules:
  # Allow example/test secrets in specific paths
  - id: example-secrets
    paths:
      - examples/
      - test/
      - "**/*_test.go"
      - "**/*.test.ts"
      - "**/*.test.tsx"

# Severity mapping
severity:
  gunj-operator-api-key: HIGH
  kubernetes-secret: CRITICAL
  jwt-secret: HIGH
  database-url: CRITICAL
  private-key: CRITICAL
  oauth-secret: HIGH
